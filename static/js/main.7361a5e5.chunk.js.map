{"version":3,"sources":["components/Layout/Layout.js","components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","App.js","index.js"],"names":["Layout","children","className","Section","FeedbackOptions","onLeaveFeedback","type","onClick","Statistics","good","neutral","bad","total","percentage","App","state","countTotalFeedback","setState","prevState","handleFeedback","field","this","Math","floor","Component","defaultProps","ReactDOM","render","document","getElementById"],"mappings":"gPAKeA,G,MAFA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,yBAAKC,UAAU,UAAUD,KCM3CE,EAPC,SAAC,GAAD,IAAGF,EAAH,EAAGA,SAAH,OACd,iCACE,sDACCA,ICeUG,EAlBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAH,OACtB,6BACE,4BAAQC,KAAK,SAASC,QAAS,kBAAMF,EAAgB,UAArD,QAGA,4BAAQC,KAAK,SAASC,QAAS,kBAAMF,EAAgB,aAArD,WAGA,4BAAQC,KAAK,SAASC,QAAS,kBAAMF,EAAgB,SAArD,SCWWG,EAlBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAlB,IAAuBC,aAAvB,MAA+B,EAA/B,EAAkCC,EAAlC,EAAkCA,WAAlC,OACjB,6BACE,0CACA,mCAASJ,GACT,sCAAYC,GACZ,kCAAQC,GACR,oCAAUC,GACV,gDAAsBC,EAAtB,OCJiBC,E,4MAGnBC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,mBAAqB,WACnB,EAAKC,UAAS,SAAAC,GACZ,MAAO,CACLN,MAAOM,EAAUT,KAAOS,EAAUR,QAAUQ,EAAUP,S,EAiB5DQ,eAAiB,SAAAC,GACf,EAAKH,UAAS,SAAAC,GACZ,OAAO,eACJE,EAAQF,EAAUE,GAAS,O,uDAKxB,IAAD,EACwBC,KAAKN,MAA5BN,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,EAAQH,EAAOC,EAAUC,EAC/B,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAiBN,gBAAiBgB,KAAKF,iBACtCP,EAAQ,EACP,kBAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,WAAYS,KAAKC,MAAOd,EAAOG,EAAS,OAG1C,oB,GArDqBY,aAAZV,EACZW,aAAe,GCHxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.7361a5e5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Layout.css';\r\n\r\nconst Layout = ({ children }) => <div className=\"Lauout\">{children}</div>;\r\n\r\nexport default Layout;\r\n","import React from 'react';\r\n\r\nconst Section = ({ children }) => (\r\n  <section>\r\n    <h2>Please, leave feedback</h2>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nexport default Section;\r\n","import React from 'react';\r\n\r\nconst FeedbackOptions = ({ onLeaveFeedback }) => (\r\n  <div>\r\n    <button type=\"button\" onClick={() => onLeaveFeedback('good')}>\r\n      Good\r\n    </button>\r\n    <button type=\"button\" onClick={() => onLeaveFeedback('neutral')}>\r\n      Neutral\r\n    </button>\r\n    <button type=\"button\" onClick={() => onLeaveFeedback('bad')}>\r\n      Bad\r\n    </button>\r\n  </div>\r\n);\r\n\r\n// FeedbackOptions.propTypes = {\r\n//   // onLeaveFeedback: propTypes.func,\r\n// };\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total = 0, percentage }) => (\r\n  <div>\r\n    <h2>Statistics</h2>\r\n    <p>Good:{good}</p>\r\n    <p>Neutral:{neutral}</p>\r\n    <p>Bad:{bad}</p>\r\n    <p>Total:{total}</p>\r\n    <p>Positive feedback:{percentage}%</p>\r\n  </div>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React, { Component } from 'react';\nimport Layout from './components/Layout/Layout';\nimport Section from './components/Section/Section.js';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions.js';\nimport Statistics from './components/Statistics/Statistics';\n\nexport default class App extends Component {\n  static defaultProps = {};\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    this.setState(prevState => {\n      return {\n        total: prevState.good + prevState.neutral + prevState.bad,\n      };\n    });\n  };\n\n  // countPositiveFeedbackPercentage = () => {\n  //   this.setState(prevState => {\n  //     return {\n  //       percentage: Math.round(\n  //         (prevState.good /\n  //           (prevState.good + prevState.neutral + prevState.bad)) *\n  //           100,\n  //       ),\n  //     };\n  //   });\n  // };\n\n  handleFeedback = field => {\n    this.setState(prevState => {\n      return {\n        [field]: prevState[field] + 1,\n      };\n    });\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = good + neutral + bad;\n    return (\n      <Layout>\n        <Section>\n          <FeedbackOptions onLeaveFeedback={this.handleFeedback} />\n          {total > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              percentage={Math.floor((good / total) * 100)}\n            />\n          ) : (\n            'No feedback'\n          )}\n        </Section>\n      </Layout>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}